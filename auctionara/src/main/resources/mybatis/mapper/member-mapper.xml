<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">


	<select id="one" parameterType="int" resultType="MemberDto">
		select * from member where member_no = #{memberNo}
	</select>
	
	<!-- 검색 + 페이징 list -->
	<select id="list" resultType="MemberDto" parameterType="Map">
		select * from (
	 		select rownum rn, TMP.* from (
	 			select * from member 
			 	<if test="type != null and keyword != null">
			 		<![CDATA[
					 	where instr(${type}, #{keyword}) > 0
			 		]]>
			 	</if>
			 	order by member_no desc
	 		) TMP
	 	) where rn between #{begin} and #{end}
	</select>
	
	
	<select id="sequence" resultType="int">
		select member_seq.nextval from dual
	</select>
		

	<insert id="join" parameterType="MemberDto">
		insert into member(
			member_no, member_email, member_pw, member_nick, attachment_no
		)
		values(
			#{memberNo}, #{memberEmail}, #{memberPw}, #{memberNick}, #{attachmentNo}
		)
	</insert>
	
	<select id="login" resultType="MemberDto" parameterType="String">
		select * from member
			where member_email = #{memberEmail}
	</select>
	
	<update id="updateLogintime" parameterType="int">
		update member
			set member_logintime = sysdate
		where member_no = #{memberNo}
	</update>
	
	<select id="checkEmail" parameterType="String" resultType="int">
		select count(*) from member
				  where member_email = #{certTarget}
	</select>
	
	<select id="checkMemberNo" resultType="int">
		select member_no from member where member_email = #{memberEmail}
	</select>
	
	<!-- member_red_count 컬럼 Update	 -->
	<update id="plusRedCount" parameterType="int">
		update member set member_red_count = member_red_count + 1 where member_no = #{memberNo}
	</update>
	
	<!-- 관리자 페이지 - 회원 목록 페이징을 위한 count -->
	<select id="count" parameterType="Map" resultType="int">
		select count(*) from member
			 <if test="type != null and keyword != null">
			 	<![CDATA[
					 where instr(${type}, #{keyword}) > 0
			 	]]>
			 </if>
	</select>
	
	<!-- 관리자 페이지 - 일반회원 / 블랙회원 update -->
	<update id="setGeneral" parameterType="int">
		update member set member_grade = '일반회원' where member_no = #{memberNo} and member_grade = '블랙회원' 
	</update>
	
	<update id="setBlock" parameterType="int">
		update member set member_grade = '블랙회원' where member_no = #{memberNo} and member_grade = '일반회원' 
	</update>
	
	
	<update id="changePw" parameterType="MemberDto">
		update member 
				set member_pw = #{memberPw}
			where member_email = #{memberEmail}
	</update>
	
	<select id="nickExists" parameterType="String" resultType="int">
		select count(*) from member
			where member_nick = #{memberNick}
	</select>

	<update id="paying" parameterType="PayingVO">
		update member 
			set member_holding_points = member_holding_points - #{price}
			where member_no = #{memberNo}
	</update>
	
	<delete id="exit" parameterType="String">
		delete member where member_email = #{memberEmail}
	</delete>
	
	<!-- 관리자 페이지 - 회원 수 count -->
	<select id="countMember" resultType="int">
		select count(*) "member_count" from member where to_char(member_joindate, 'YYMM') = to_char(sysdate, 'YYMM')
	</select>
	
	<!-- 관리자 페이지 - 현금화 승인 후 보유 포인트 차감 -->
	<update id="deductPoint" parameterType="Map">
		update member set member_holding_points = member_holding_points - #{cashingMoney} where member_no = #{memberNo}
	</update>
	
	
	<update id="info" parameterType="MemberDto">
		update member 
			set
				member_nick = #{memberNick}, attachment_no = #{attachmentNo},
				member_preference = #{memberPreference}
			where
				member_email = #{memberEmail}
	</update>
	
	<select id="recall" parameterType="String" resultType="int">
		select attachment_no from member
			where member_email = #{memberEmail}
	</select>

	<!-- 관리자 페이지 - 일반회원 전환 후 red_count = 0으로 리셋 -->
	<update id="resetRedCount" parameterType="int">
		update member set member_red_count = 0 where member_no = #{memberNo}
	</update>
	
	<select id="mypageOne" parameterType="int" resultType="MemberVO">
		select * from member where member_no = #{memberNo}
	</select>
	
	<select id="exitOne" parameterType="int" resultType="MemberDto">
		select member_email, member_holding_points from member where member_no = #{memberNo}
	</select>

</mapper> 