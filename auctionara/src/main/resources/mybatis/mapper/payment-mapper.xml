<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="payment">
	
	<!-- 해당 월 포인트 총 충전액 select -->
	<select id="monthlyTotalPoints" resultType="int">
		select sum(payment_price) "total_points" from payment where to_char(payment_time, 'MM') = (select to_char(sysdate,'MM')-1 from dual)
	</select>
	<select id="sequence" resultType="int">
		select payment_seq.nextval from dual
	</select>
	<insert id="insert" parameterType="PaymentInsertVO">
		insert into payment(payment_no, member_no, payment_tid, payment_price, payment_time, payment_status)
		values (#{paymentNo}, #{memberNo}, #{paymentTid}, #{paymentPrice}, sysdate, 1)
	</insert>
	<update id="charge" parameterType="PaymentInsertVO">
		update member set member_holding_points = member_holding_points + #{paymentPrice} where member_no = #{memberNo}
	</update>
	<insert id="monthlyCharge">
		
	</insert>
	<select id="one" parameterType="int" resultType="PaymentInsertVO">
		select * from payment where payment_no = #{paymentNo}
	</select>
	<select id="success" parameterType="int" resultType="PaymentSuccessVO">
		select p.payment_price, m.member_holding_points from payment p, member m
			where m.member_no = p.member_no and p.payment_no = #{paymentNo}
	</select>
	<select id="allList" parameterType="int" resultType="PaymentInsertVO">
		select * from payment where member_no=#{memberNo}
	</select>
	<select id="refundList" parameterType="int" resultType="PaymentInsertVO">
		select p.payment_price, p.payment_time, p.payment_no from payment p, member m 
       		where m.member_no = #{memberNo} 
        and 
        	to_char(p.payment_time, 'YYYYMMDD')>sysdate-7
        and
        	p.payment_status = 1
        and
        	m.member_holding_points >= p.payment_price
	</select>
	<update id="refund" parameterType="int">
		update payment set payment_status = 0 where payment_no=#{paymentNo}
	</update>
	<update  id="refundMember" parameterType="PaymentInsertVO">
		update member set member_holding_points = member_holding_points - #{paymentPrice} where member_no = #{memberNo}
	</update>
	<select id="cashingSequence" resultType="int">
		select cashing_points_seq.nextval from dual
	</select>
	<update id="cashing" parameterType="CashingPointsVO">
		update member set member_holding_points = member_holding_points - #{cashingMoney} where member_no = #{memberNo}
	</update>
	<insert id="cashingInsert" parameterType="CashingPointsVO">
		insert into cashing_points(cashing_no, member_no, cashing_money, cashing_bank, cashing_account, cashing_type, cashing_request_time)
		values (#{cashingNo}, #{memberNo}, #{cashingMoney}, #{cashingBank}, #{cashingAccount}, #{cashingType}, sysdate)
	</insert>
	<select id="cashingList" parameterType="int" resultType="CashingListVO">
        select * from cashing_points where member_no=#{memberNo}
	</select>
</mapper> 