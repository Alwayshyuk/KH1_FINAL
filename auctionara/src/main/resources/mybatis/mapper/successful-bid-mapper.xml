<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="successful_bid">
	
	<!-- 시퀸스 생성 -->
	<select id="sequence" resultType="int">
		select successful_bid_seq.nextval from dual
	</select>
	
	<!-- 낙찰 -->	
	<insert id="insert" parameterType="SuccessfulBidDto">
		insert into successful_bid(
			succ_bid_no, auction_no, succ_bidder_no, succ_final_bid, succ_auction_count
		)
		values(
			#{succBidNo}, #{auctionNo}, #{succBidderNo}, #{succFinalBid}, #{succAuctionCount}
		)
	</insert>
	
	<!-- 해당 월 총 낙찰액 -->
	<select id="monthlyTotalSuccBid" resultType="int">
		select sum(succ_final_bid) "succ_final_bid" from successful_bid where succ_bid_status = 1 and to_char(succ_date, 'MM') = (select to_char(sysdate,'MM')-1 from DUAL)
	</select>
	
	<select id="one" resultType="SuccessfulBidDto" parameterType="int">
		select * from successful_bid where auction_no = #{auctionNo}
	</select>
	<update id="paying" parameterType="int">
		update successful_bid
		 set succ_bid_status = 1
		 where auction_no = #{auctionNo}
	</update>

	<!-- 거래 완료 및 평가 여부 확인 -->
	<select id="checkRating" parameterType="int" resultType="CheckRatingVO">
		select A.auction_no, A.succ_auctioneer_approve, A.succ_bidder_approve, A.succ_bid_status, B.rating_no from successful_bid A
		left join member_rating B on A.auction_no = B.auction_no
		where A.auction_no = #{auctionNo}
	</select>
	
	<!-- 판매자 거래 완료 -->
	<update id="auctioneerApprove" parameterType="int">
		update successful_bid set succ_auctioneer_approve = sysdate where auction_no = #{auctionNo}
	</update>
	
	<!-- 구매자 거래 완료 -->
	<update id="bidderApprove" parameterType="int">
		update successful_bid set succ_bidder_approve = sysdate where auction_no = #{auctionNo}
	</update>
	
	<!-- 낙찰 7일 후 자동 거래완료 처리 -->
	<update id="autoApprove">
		update successful_bid set succ_auctioneer_approve = sysdate, succ_bidder_approve = sysdate 
		where trunc(sysdate) - trunc(succ_date) >= 7
	</update>
	
	<!-- 낙찰 회원 찾기 -->
	<select id="searchBidder" parameterType="int" resultType="int">
		select succ_bidder_no from successful_bid 
		where auction_no = ${auctionNo}
	</select>
	
	
	<!-- 마이페이지 낙찰성공한 총 개수 출력 -->
	<select id="countSuccbidbyMemberNo" parameterType="int" resultType="int">
		select count(*) from successful_bid where succ_bidder_no = #{memberNo}
	</select>
	
	<!-- 경매인 탈퇴 시 낙찰성공 후 결제완료된 내역이 있는지 출력 -->	
	<select id="countPaymentbyAuctioneerNo" parameterType="int" resultType="int">
		select count(*) from (select a.auction_no, a.auction_process, a.auction_private, s.succ_bid_no, s.succ_bid_status
        	from successful_bid s inner join auction a on s.auction_no = a.auction_no
        where a.auctioneer_no = #{memberNo} and s.succ_bid_status=1 and a.auction_process=0 and a.auction_private=0)
	</select>
	
	<!-- 낙찰자 탈퇴 시 낙찰성공 후 결제완료된 내역이 있는지 출력 -->
	<select id="countPaymentbybidderNo" parameterType="int" resultType="int">
		select count(*) from successful_bid 
			where succ_bidder_no = #{memberNo} and succ_bid_status=1
	</select>
	
	<!-- 경매인 탈퇴 시 결제예정이었던 내역을 상태3번으로 변경 -->
	<update id="intoStatusThrid" parameterType="int">
		merge into successful_bid s using auction a
			on (s.auction_no = a.auction_no)
		when matched then
			update set s.succ_bid_status = 3 where a.auctioneer_no=#{memberNo} and s.succ_bid_status=0
	</update>

	<!-- 거래 완료 시 판매자에게 포인트 전달 -->
	<update id="approveFinish" parameterType="int">
		merge into member A 
        using (select B.auction_no, B.auctioneer_no, C.succ_final_bid, C.succ_auctioneer_approve, C.succ_bidder_approve 
            from auction B join successful_bid C on B.auction_no = C.auction_no) D
			on (A.member_no = D.auctioneer_no)         
		when matched then
			update set A.member_holding_points = (A.member_holding_points + D.succ_final_bid)
            where D.auction_no = #{auctionNo} and D.succ_auctioneer_approve is not null and D.succ_bidder_approve is not null
	</update>
	
	<!-- 자동 거래 완료 시 경매 판매자에게 포인트 전달 -->
	<update id="approveAutoFinish">
		merge into member A 
        using (select B.auction_no, B.auctioneer_no, C.succ_final_bid, C.succ_auctioneer_approve, C.succ_bidder_approve, C.succ_date 
            from auction B join successful_bid C on B.auction_no = C.auction_no) D
			on (A.member_no = D.auctioneer_no)         
		when matched then
			update set A.member_holding_points = (A.member_holding_points + D.succ_final_bid)
            where trunc(sysdate) - trunc(D.succ_date) >= 7  and (D.succ_auctioneer_approve is null or D.succ_bidder_approve is null)
	</update>
	
	<!-- 결제 완료 여부 확인 -->
	<select id="checkStatus" parameterType="int" resultType="int">
		select succ_bid_status from successful_bid 
			where auction_no = #{auctionNo}
	</select>
	
	<!-- 낙찰 7일 후 미결제자 자동 미결제 처리 -->
	<update id="checkCashing">
		update successful_bid set succ_bid_status = 2
		where succ_bid_status = 0 and trunc(sysdate) - trunc(succ_date) >= 7 
	</update>
	
	<!-- 낙찰 7일 후 미결제자 제재 처리 -->		
	<update id="autoRedCount">
		merge into member A 
        using successful_bid B on (A.member_no = B.succ_bidder_no)
		when matched then
			update set A.member_red_count = A.member_red_count + 1
            where B.succ_bid_status = 0 and trunc(sysdate) - trunc(B.succ_date) >= 7
	</update>
		
</mapper> 