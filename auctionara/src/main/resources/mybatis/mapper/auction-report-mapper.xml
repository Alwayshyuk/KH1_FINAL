<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	mapper 파일은 특정 테이블에 대한 SQL 구문을 보관하는 파일이다
	- myBatis를 이용하는 개발자는 이곳에 저장된 SQL 구문을 "아이디"를 이용해서 호출한다
	- 파일마다 동일한 아이디로 인해 발생하는 충돌을 방지하기 위해 고유한 namespace를 사용한다 
	- 만약 namespace가 olympic이고 구문 ID가 list라면 외부에서는 olympic.list로 호출한다
	- 일반적으로 namespace는 테이블명으로 한다!
	- mapper 내부에는 다음 종류 태그로 구문을 저장할 수 있다.
		- <insert>
		- <select>
		- <update>
		- <delete>
	- 각 구문은 반드시 아이디를 가져야 한다.
	- 각 구문에는 다음과 같은 속성을 작성할 수 있다
		- parameterType : 해당 구문이 실행되기 위해 필요한 데이터의 자료형(1개만 작성 가능, 선택)
		- resultType : 해당 구문의 실행 결과를 변환하기 위한 자료형(1개만 작성 가능, 필수)
			- (주의) List이든 아니든 DTO의 형태를 작성한다(모르는 부분을 알려준다)
	- 각 구문에는 데이터를 다음과 같이 바인딩할 수 있다
		- 정적 바인딩 : ${이름} 형태로 작성하면 어떠한 추가 작업도 없이 해당 위치에 데이터가 그대로 작성된다
		- 동적 바인딩 : #{이름} 형태로 작성하면 자동으로 자료형에 맞게 해당 데이터를 추출하여 작성해준다(DTO 변수명)
 -->

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="auctionReport">
	
	<!-- 경매 게시글 신고 list를 위한 수동 mapping -->
	<resultMap type="AuctionReportListVO" id="auctionReportMap">
		<collection property="auctionReportList" javaType="List" ofType="AuctionReportListVO" select="list" column="auction_report_no">
			<result column="auction_report_no" property="auctionReportNo"/>
			<result column="auction_no" property="auctionNo"/>
			<result column="auction_reporter_no" property="auctionReporterNo"/>
			<result column="auction_report_reason" property="auctionReportReason"/>
			<result column="auction_report_time" property="auctionReportTime"/>
			<result column="auctioneer_name" property="auctioneerName"/>
			<result column="reporter_name" property="reporterName"/>
			<result column="auctioneer_no" property="auctioneerNo"/>
		</collection>
	</resultMap>
	
	<!-- 경매 게시글 신고 페이징 list -->
	<select id="list" parameterType="Map" resultType="AuctionReportListVO">
	 	
	 	select * from (
	 		select rownum rn, TMP.* from (
	 			select AR.*, M.member_name "auctioneer_name", A.auctioneer_no, M2.member_name "reporter_name" from auction_report AR 
	 				inner join auction A on AR.auction_no = A.auction_no 
	 				inner join member M on A.auctioneer_no = M.member_no 
	 				inner join member M2 on AR.auction_reporter_no = M2.member_no 
	 				<if test="type != null and keyword != null">
					 	<![CDATA[
					 		where instr(${type}, #{keyword}) > 0
					 	]]>
				 	</if>
			 	order by auction_report_no desc
	 		) TMP
	 	) where rn between #{begin} and #{end}
	 	
	 </select>
	 
	 <!-- list 페이징을 위한 count	-->
	 <select id="count"  parameterType="Map" resultType="int">
	 	select count(*) from auction_report AR 
	 		inner join auction A on AR.auction_no = A.auction_no 
	 		inner join member M on A.auctioneer_no = M.member_no 
	 		inner join member M2 on AR.auction_reporter_no = M2.member_no 
	 		<if test="type != null and keyword != null">
		 		<![CDATA[
				 	where instr(${type}, #{keyword}) > 0
		 		]]>
		 	</if>
	 </select>
	 
	 <!-- 관리자 제재가 진행되면 제재 여부 컬럼 update -->
	 <update id="setRestrict" parameterType="int">
	 	update auction_report set auction_report_restriction = 1 where auction_report_no = #{auctionReportNo}	
	 </update>
	 
	 <!-- 상세 조회 -->
	 <select id="one" resultType="AuctionReportDto" parameterType="int">
	 	select * from auction_report where auction_report_no = #{auctionReportNo}
	 </select>
	 
	 <!-- 특정 경매에 대한 report list -->
	 <select id="detailList" parameterType="Map" resultType="AdminAuctionDetailReportVO">
		 select * from (
		 		select rownum rn, TMP.* from (
		 			select AR.*, M.member_name, M.member_nick from auction_report AR
    					inner join member M on AR.auction_reporter_no = M.member_no
    					where auction_no = #{auctionNo}
		 				<if test="type != null and keyword != null">
						 	<![CDATA[
						 		and instr(${type}, #{keyword}) > 0
						 	]]>
					 	</if>
				 	order by auction_report_no desc
		 		) TMP
		 	) where rn between #{begin} and #{end}
	 </select>

</mapper> 